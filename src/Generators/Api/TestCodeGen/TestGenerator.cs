using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;

namespace ClassLibrary1.Generators
{
    [Generator(LanguageNames.CSharp)]
    public class TestGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var codebuilders = context.CompilationProvider.Select(
                static (compilation, _) =>
                {
                    return "";
                }
            );

            // generate a class that contains their values as const strings
            context.RegisterSourceOutput(
                codebuilders,
                static (sourceProductionContext, codeBuildersTuples) =>
                {
                    sourceProductionContext.AddSource(
                        $"Test2.g.cs",
                        $@"
    //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Framework.ApiClient.Services;
using Framework.ApiClient.Services.Helper;

namespace ooeentwickleruno.apiclient
{{
    [Codelisk.GeneratorAttributes.GeneralAttributes.Registration.RegisterSingleton]
    public partial class AccountRepository : BaseAuthRepository<IAccountApi>, IAccountRepository
    {{
        public AccountRepository(IAuthenticationService authenticationService, BaseRepositoryContainer baseRepositoryContainer)
            : base(authenticationService, baseRepositoryContainer)
        {{
        }}

        public Task<global::AccountDto> Add(global::AccountDto accountDto)
        {{
            return TryRequest(() => _repositoryApi.Add(accountDto));
        }}

        public Task AddRange(System.Collections.Generic.List<global::AccountDto> accountDtoList)
        {{
            return JustSend(() => _repositoryApi.AddRange(accountDtoList));
        }}

        public Task Delete(Guid id)
        {{
            return JustSend(() => _repositoryApi.Delete(id));
        }}

        public Task<global::AccountDto> Get(Guid id)
        {{
            return TryRequest(() => _repositoryApi.Get(id));
        }}

        public Task<List<global::AccountDto>> GetAll()
        {{
            return TryRequest(() => _repositoryApi.GetAll());
        }}

        public Task<List<AccountFull>> GetAllFull()
        {{
            return TryRequest(() => _repositoryApi.GetAllFull());
        }}

        public Task<AccountFull> GetFull(Guid id)
        {{
            return TryRequest(() => _repositoryApi.GetFull(id));
        }}

        public Task<global::AccountDto?> GetLast()
        {{
            return TryRequest(() => _repositoryApi.GetLast());
        }}

        public Task<global::AccountDto> Save(global::AccountDto accountDto)
        {{
            return TryRequest(() => _repositoryApi.Save(accountDto));
        }}
    }}

    public partial interface IAccountRepository
    {{
        Task<AccountDto> Add(AccountDto accountDto);

        Task AddRange(System.Collections.Generic.List<AccountDto> accountDtoList);

        Task Delete(Guid id);

        Task<AccountDto> Get(Guid id);

        Task<List<AccountDto>> GetAll();

        Task<List<AccountFull>> GetAllFull();

        Task<AccountFull> GetFull(Guid id);

        Task<AccountDto?> GetLast();

        Task<AccountDto> Save(AccountDto accountDto);
    }}
}}

"
                    );
                }
            );
        }
    }
}
